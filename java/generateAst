#! /bin/bash

function write() {
    echo "$1" >> $fileName
}

arg1=$1;

function main() {
    if [ -z "$1" ]
        then
        echo "Usage: generateAst <output directory>"
        return 1
    fi

    allTypes=(
        "Binary   : Expr left, Token operator, Expr right"
        "Grouping : Expr expression"
        "Literal  : Object value"
        "Unary    : Token operator, Expr right"
    )

    defineAst $1 "Expr" "${allTypes[@]}"
}

function defineAst() {
    local outputDir=$1
    local baseName=$2
    local path="$outputDir/$baseName.java"

    shift
    shift
    local types=("$@")
    local fileName=$baseName.java

    echo "the path is: $path"

    echo "package com.craftinginterpreters.lox;" > $fileName
    write ""
    write "import java.util.List;"
    write ""
    write "abstract class $baseName {"

    defineVisitor $baseName "${types[@]}"

    # The AST classes.
    for type in "${types[@]}"; do
        className=$(echo "$type" | cut -d':' -f1 | tr -d '[:space:]')
        fields=$(echo "$type" | cut -d':' -f2 | xargs)
        
        defineType $baseName $className "$fields"
    done

    # The base accept() method.
    write ""
    write "  abstract <R> R accept(Visitor<R> visitor);"
    write "}"
}

function defineVisitor() {
    local baseName=$1

    shift
    local types=("$@")

    write "  interface Visitor<R> {"

    for type in "${types[@]}"; do
        typeName=$(echo "$type" | cut -d':' -f1 | tr -d '[:space:]')
        baseNameLower=$(echo "$baseName" | tr '[:upper:]' '[:lower:]')
    
        write "    R visit${typeName}${baseName}(${typeName} ${baseNameLower});"
    done
    
    write "  }"
}

function defineType() {
    local basName=$1
    local className=$2
    local fieldList=$3

    write "  static class $className extends $baseName {"

    # Constructor.
    write "    $className($fieldList) {"

    # Store parameters in fields.
    OLDIFS=$IFS
    IFS=', ' read -ra fields <<< "$fieldList"
    IFS=$OLDIFS

    for ((i = 0; i < ${#fields[@]}; i += 2)); do
        name="${fields[i + 1]}"
        write "      this.$name = $name;"
    done

    write "    }"

    #  Visitor pattern
    write ""
    write "    @Override"
    write "    <R> R accept(Visitor<R> visitor) {"
    write "      return visitor.visit$className$basName(this);"
    write "    }"

    # Fields.
    write ""
    for ((i = 0; i < ${#fields[@]}; i += 2)); do
        name="${fields[i]} ${fields[i + 1]}"
        write "    final $name;"
    done

    write "  }"
}


main $arg1 