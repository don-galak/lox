#! /bin/bash

function write() {
    echo "$1" >> $fileName
}

arg1=$1;

function main() {
    if [ -z "$1" ]
        then
        echo "Usage: generateAst <output directory>"
        return 1
    fi

    allTypes=(
        "Binary   : Expr left, Token operator, Expr right"
        "Grouping : Expr expression"
        "Literal  : Object value"
        "Unary    : Token operator, Expr right"
    )

    defineAst $1 "Expr" "${allTypes[@]}"
}

function defineAst() {
    local outputDir=$1
    local baseName=$2
    local path="$outputDir/$baseName.java"

    shift
    local types=("$@")
    local fileName=$baseName.java

    echo "the path is: $path"

    echo "package com.craftinginterpreters.lox;" > $fileName
    write ""
    write "import java.util.List;"
    write ""
    write "abstract class $baseName {"

    defineVisitor $baseName "${types[@]}"

    # The AST classes.
    for type in "${types[@]}"; do
        className=$(echo "$type" | cut -d':' -f1 | tr -d '[:space:]')

        # TODO This needs fixing.
        fields=$(echo "$type" | cut -d':' -f2 | tr -d '[:space:]')
        defineType $baseName $className $fields
    done

    # The base accept() method.
    # echo "" >> $fileName
    # echo "  abstract <R> R accept(Visitor<R> visitor);" >> $fileName
    # echo "}" >> $fileName
}

function defineVisitor() {
    local baseName=$1

    shift
    shift

    local types=("$@")

    write "  interface Visitor<R> {"

    for type in "${types[@]}"; do
        typeName=$(echo "$type" | cut -d':' -f1 | tr -d '[:space:]')
        baseNameLower=$(echo "$baseName" | tr '[:upper:]' '[:lower:]')
    
        write "    R visit${typeName}${baseName}(${typeName} ${baseNameLower});"
    done
    
    write "  }"
}

function defineType() {
    basName=$1
    className=$2
    fieldList=$3

    write "  static class $className extends $baseName {"

    # Constructor
    write "    $className($fieldList) {"
}


main $arg1 